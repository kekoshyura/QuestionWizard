@page "/questions/{surveyId:int}"
@using Client.Component.Public.Shared
@using System.Collections.Immutable;


<Navbar />


<main class="container min-vh-90 py-5 d-flex justify-content-center align-items-center">
    <div>
        @if(_survey == null) {
            <LoadingDot />
        }
        else {
            <h1>The survey @_survey.Title</h1>
            <br/>
        }
        @if (_questions == null || _questions.Count == 0) {
            <LoadingDot />
        }
        else {
            @if (percentageOfCorrect == 0.1) {
                <h2 class="mb-4">@CurrentQuestion.Text</h2>
                <form>
                    @foreach (var answer in CurrentQuestionOptions) {
                        <div class="mb-2">
                            <input type="radio" id="@answer.Id" name="selectedAnswer" checked="@IsAnswerSelected(answer.Id)" @onchange="(() => SelectAnswer(answer))" />
                            <label for="@answer.Id" class="ml-2">@answer.Text</label>
                        </div>
                    }
                </form>
                <div class="d-flex justify-content-between">
                    <button @onclick="PreviousQuestion" class="btn btn-outline-dark" disabled="@(currentQuestionIndex == 0)">Previous</button>
                    @if (!isLast) {
                        <button @onclick="AddAnswer" class="btn btn-outline-success" disabled="@(selectedAnswerId == 0)">Reply</button>
                    }
                    else {
                        <button @onclick="ScoreCount" class="btn btn-outline-success" disabled="@(selectedAnswerId == 0)">Finish</button>
                    }
                    <button @onclick="NextQuestion" class="btn btn-outline-dark" disabled="@(currentQuestionIndex == _questions.Count - 1)">Next</button>
                </div>
            }
            else {
                <label >You answered @percentageOfCorrect % of the questions correctly</label>
                <div class="progress">
                    <div class="progress-bar" role="progressbar" style="width: @((int)percentageOfCorrect)%; color: green; background-color: green">
                        @percentageOfCorrect%
                    </div>
                </div>
            }
           
        }
    </div>
</main>

@code {
    [Parameter] public int surveyId { get; set; }
    [Inject] DatabaseCache databaseCache { get; set; }
    private List<QuestionModel> _questions = new List<QuestionModel>();
    private int currentQuestionIndex = 0;
    private List<QuestionOptionModel> _questionOptions = new List<QuestionOptionModel>();
    private SurveyModel _survey = new SurveyModel();
    private int selectedAnswerId;
    private List<QuestionOptionModel> _usersAnswers = new List<QuestionOptionModel>();
    private bool isLast = false;
    private double percentageOfCorrect = 0.1;
    private bool finishSurvey = false;

    protected override async Task OnInitializedAsync() {
        if (databaseCache.Questions == null) {
            await databaseCache.GetQuestionsFromDbCache();
        }
        _questions = await databaseCache.GetQuestionBySurveyId(surveyId);
        if (_questions.Count > 0) {
            _questionOptions = await databaseCache.GetQuestionOptionsByQuestionId(CurrentQuestion.Id);
        }
        _survey = await databaseCache.GetSurveyById(surveyId);
    }

    private QuestionModel CurrentQuestion => _questions[currentQuestionIndex];
    private List<QuestionOptionModel> CurrentQuestionOptions => _questionOptions;

    private async Task UpdateQuestionOptions() {
        _questionOptions = await databaseCache.GetQuestionOptionsByQuestionId(CurrentQuestion.Id);
    }

    private void NextQuestion() {
        if (currentQuestionIndex < _questions.Count - 1) {
            currentQuestionIndex++;
            UpdateQuestionOptions();
            isLast = isLastQuestion();
        }
    }

    private void PreviousQuestion() {
        if (currentQuestionIndex > 0) {
            currentQuestionIndex--;
            UpdateQuestionOptions();
        }
    }

    private void SelectAnswer(QuestionOptionModel answer) {
        selectedAnswerId = answer.Id;
    }

    private async void AddAnswer() {
        var answer = await databaseCache.GetQuestionOptionById(selectedAnswerId);
        if(_usersAnswers.Count == 0) {
            _usersAnswers.Add(answer);
        }
        else {
            var existingAnswer = _usersAnswers.FirstOrDefault(a => a.QuestionId == answer.QuestionId);
            if (existingAnswer != null) {
                // Якщо відповідь для поточного питання вже є, замініть її
                var index = _usersAnswers.IndexOf(existingAnswer);
                _usersAnswers[index] = answer;
            }
            else {
                _usersAnswers.Add(answer);
            }
        }
        selectedAnswerId = 0;
        NextQuestion();
    }


    private bool isLastQuestion() {
        if (currentQuestionIndex == _questions.Count - 1)
            return true;
        else
            return false;
    }

    private void ScoreCount() {
        AddAnswer();
        var countOfCorrect = 0;
        foreach (var answ in _usersAnswers) {
            if (answ.IsCorrect) {
                countOfCorrect++;
            }
        }
        percentageOfCorrect = Math.Round((double)countOfCorrect / _questions.Count * 100, 1);
    }

    private bool IsAnswerSelected(int answerId) {
        return selectedAnswerId == answerId;
    }

}
