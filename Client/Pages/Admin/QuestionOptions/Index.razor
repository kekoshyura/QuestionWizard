@page "/admin/questionoptions/{QuestionId:int}"
@using System.Net




<main class="admin-area-main">
    <SideBar />
    <div class="admin-area-content container-fluid bg-lightgray white">
        @if (_questionOptions == null) {
            <LoadingDot />
        }
        else {
            <div class="row g-0">
                <div class="col">
                    @if (_question == null) {
                        <LoadingDot />
                    }
                    else {
                        <h1>@_question.Text</h1>
                    }
                    <br />
                    <a href="/admin/questions/@_question.SurveyId" class="btn btn-secondary shadow me-5 md-f-size-1-5">
                        <i class="fas fa-chevron-left"></i> Back to questions
                    </a>
                    
                    <br />
                    <hr />
                    <br />
                    @if(_questionOptions.Count == 0) {
                        <h1>No question options found. Please, create one.</h1>
                        <a href="/admin/questionOptions/create/@_question.Id" class="btn btn-success shadow me-5 md-f-size-1-5">
                            <i class="fas fa-plus"></i>Create Question Option
                        </a>
                    }
                    else {
                        @if (databaseCache.QuestionOptions == null || _attempingToDeletedQuestionOption == true) {
                            <LoadingDot />
                        }
                        else {
                            <a href="/admin/questionOptions/create/@_question.Id" class="btn btn-success shadow me-5 md-f-size-1-5">
                                <i class="fas fa-plus"></i>Create Question Option
                            </a>

                            <button @onclick="() => databaseCache.GetQuestionOptionsFromDbCache()" class="btn btn-primary md-f-size-1-5 shadow">
                                <i class="fas fa-sync"></i> Refresh data
                            </button>

                            <br />
                            <br />
                            <br />

                            @if (databaseCache.QuestionOptions.Count < 1) {
                                <h1>No questions found. Please, create one.</h1>
                            }
                            else {
                                <div class="table-responsive">
                                    <table class="table table-striped table-bordered table-sm">
                                        <thead>
                                            <tr>
                                                <th scope="col">Question Option Text</th>
                                                <th scope="col">Is Correct</th>
                                                <th scope="col">Actions</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var qOptions in _questionOptions) {
                                                <tr>
                                                    <td class="w-35">
                                                        <p>@qOptions.Text</p>
                                                    </td>
                                                    <td class="w-35">
                                                        <p>@qOptions.IsCorrect</p>
                                                    </td>
                                                    <td class="w-35">
                                                        <div class="d-flex flex-column">
                                                            <a href="/admin/questionOptions/update/@qOptions.Id" class="btn btn-update shadow md-f-size-1-5">
                                                                <i class="fas fa-edit"></i> Update
                                                            </a>
                                                            <br />
                                                            <button @onclick="(() => DeleteQuestionOption(qOptions))" class="btn btn-danger shadow md-f-size-1-5">
                                                                <i class="fas fa-trash"></i> Delete
                                                            </button>
                                                        </div>
                                                    </td>

                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                </div>

                            }
                        }
                    }
                    <div class="position-fixed bottom-0 end-0 z-index-5">
                        @if (_successfullyDeletedQuestionOption == true) {
                            <Toast IsError="false"
                                    ToastTitle="Successfully deleted question"
                                    ToastBody="The question has been removed from the database"
                                   ParentMethodToCallOnClickBtnClose="() => _successfullyDeletedQuestionOption = false" />
                        }
                        @if (_unsuccessfullyTriedDeletedQuestionOption == true) {
                            <Toast IsError="true"
                                    ToastTitle="Delete failed."
                                   ToastBody="@($"The reason is \"{_reasonUnsuccessfullyTriedToDeletedQuestionOption}\". Please try again and if the issue persists contact to the administrator.")"
                                   ParentMethodToCallOnClickBtnClose="() => _unsuccessfullyTriedDeletedQuestionOption = false" />
                        }
                    </div>
                </div>
            </div>
        }
    </div>
</main>


@implements IDisposable
@code {
    [Inject] DatabaseCache databaseCache { get; set; }
    [Inject] HttpClient httpClient { get; set; }
    [Parameter] public int QuestionId { get; set; }


    private List<QuestionOptionModel> _questionOptions = null;
    private QuestionModel _question = null;
    private bool _attempingToDeletedQuestionOption = false;
    private bool _successfullyDeletedQuestionOption = false;
    private bool _unsuccessfullyTriedDeletedQuestionOption = false;
    private string _reasonUnsuccessfullyTriedToDeletedQuestionOption = string.Empty;

    protected override async Task OnInitializedAsync() {
        if (databaseCache.QuestionOptions == null) {
            await databaseCache.GetQuestionOptionsFromDbCache();
        }
        _question = await databaseCache.GetQuestionById(QuestionId);
        _questionOptions = await databaseCache.GetQuestionOptionsByQuestionId(QuestionId);
        if (_questionOptions.Count == 0 && _question.Text == null) {
            throw new ArgumentNullException();
        }
    }

    public void Dispose() => databaseCache.OnQuestionOptionsDataChanged -= StateHasChanged;

    private async void DeleteQuestionOption(QuestionOptionModel questionOptionToDelete) {
        if (questionOptionToDelete == null) {
            _reasonUnsuccessfullyTriedToDeletedQuestionOption = $"The Question option is null";
            _unsuccessfullyTriedDeletedQuestionOption = true;
        }

        HttpResponseMessage questionOptionResponse = await httpClient.DeleteAsync($"{ApiEndpoints.s_questionOptions}/{questionOptionToDelete.Id}");
        if (questionOptionResponse.StatusCode == HttpStatusCode.NoContent) {
            if (databaseCache.QuestionOptions.Remove(questionOptionToDelete)) {
                _successfullyDeletedQuestionOption = true;
            }
            else {
                _reasonUnsuccessfullyTriedToDeletedQuestionOption = "An unexpected error has occured. Please try again and if the issue persists contact to the administrator.";
                _unsuccessfullyTriedDeletedQuestionOption = true;
            }
        }
        else {
            _reasonUnsuccessfullyTriedToDeletedQuestionOption = $"The API didn't return an HttpStatusCode.NoContent status code. Insted the api returned {questionOptionResponse.StatusCode} and gave the following reason for failure: {questionOptionResponse.ReasonPhrase}.";
            _unsuccessfullyTriedDeletedQuestionOption = true;
        }

        _attempingToDeletedQuestionOption = false;
        StateHasChanged();
    }
}
