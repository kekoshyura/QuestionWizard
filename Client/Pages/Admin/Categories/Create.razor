@page "/admin/categories/create"
@using System.Net
@using Client.Component.Admin

<AuthorizeView Roles="Administrator">
    <Authorized Context="Auth">
        <main class="admin-area-main">
            <SideBar />

            <div class="admin-area-content container-fluid bg-white">
                <div class="row g-0">
                    <div class="col">
                        <h1 class="mb-4">@(_createSuccessful ? "Success! Go back to all categoties." : "Create Category")</h1>
                        @if (_attempingToCreate == true) {
                            <h1>Creating category...</h1>
                            <LoadingDot />
                        }
                        else if (_createSuccessful == false && _attempingToCreate == false) {
                            <EditForm Model="_categoryToCreate" OnValidSubmit="CreateCategory">
                                <DataAnnotationsValidator />

                                <div class="form-group mb-5">
                                    <label for="categoryName">Category Name</label>
                                    <InputText @bind-Value="_categoryToCreate.Title" class="form-control" id="categoryName"></InputText>
                                </div>
                                <div class="form-group mb-5">
                                    <label for="categoryDescription">Category Description</label>
                                    <InputText @bind-Value="_categoryToCreate.Description" class="form-control" id="categoryDescription"></InputText>
                                </div>
                                <div class="form-group mb-5">
                                    <label for="sectionImage">Category image(jpg-jpeg or png 1920*1080)</label>

                                    @if (_attempingToUplaodImage == true) {
                                        <LoadingDot />
                                    }
                                    else if (_attempToUploadFailed == true) {
                                        <h4 class="text-danger">Faild to upload image. @_reasonImageUploadFailed</h4>
                                    }
                                    else {
                                        <img src="@($"{ApiEndpoints.ServerBaseUrl}/{_categoryToCreate.SectionImagePath}")" class="admin-crud-form-thumbnail-image" alt="Post section image" />
                                    }

                                    <br />

                                    <InputFile OnChange="HandleUploadImage" class="form-control mt-4" id="sectionImage"></InputFile>
                                </div>
                                <ValidationSummary />

                                <button class="btn btn-success shadow d-block mt-5 md-f-size-1-5" type="submit">
                                    <i class="far fa-save"></i> Save
                                </button>
                            </EditForm>
                        }


                        <a href="/admin/categories" class="btn btn-primary shadow mt-5 md-f-size-1-5">
                            <i class="fas fa-arrow-left"></i> Back to all categories
                        </a>
                    </div>
                </div>
            </div>
        </main>
    </Authorized>

    <NotAuthorized>
        <SignIn></SignIn>
    </NotAuthorized>
</AuthorizeView>




@code{
    [Inject] HttpClient httpClient { get; set; }
    [Inject] DatabaseCache databaseCache { get; set; }

    private SectionModel _categoryToCreate = new SectionModel { SectionImagePath = "/assets//img/other/36421940-placeholder.jpg", Surveys = new List<SurveyModel>() };
    private bool _attempingToCreate = false;
    private bool _attempingToCreateFailed = false;
    private bool _createSuccessful = false;

    private async Task CreateCategory() {
        _attempingToCreate = true;

        HttpResponseMessage response = await httpClient.PostAsJsonAsync<SectionModel>(ApiEndpoints.s_sections, _categoryToCreate);

        if(response.StatusCode == HttpStatusCode.Created) {
            SectionModel addedSection = await response.Content.ReadFromJsonAsync<SectionModel>();
            databaseCache.Sections.Add(addedSection);
            _createSuccessful = true;
        }
        else {
            _attempingToCreateFailed = true;
        }
        _attempingToCreate = false;
    }

    private bool _attempingToUplaodImage = false;
    private bool _attempToUploadFailed = false;
    private string _reasonImageUploadFailed = null;

    private async Task HandleUploadImage(InputFileChangeEventArgs e) {
        _attempingToUplaodImage = true;
        if (e.File.ContentType != "image/jpeg" && e.File.ContentType != "image/png")
        {
            _reasonImageUploadFailed = "Please only upload JPEG, JPG or PNG images";
            _attempToUploadFailed = true;
        }
        else if (e.File.Size >= 31457280)// 31457280byte == 30 megaBytes 
        {
            _reasonImageUploadFailed = "Please only upload images that are smaller than 30 megaBytes(MB).";
            _attempToUploadFailed = true;
        }
        else {
            IBrowserFile uploadedImageFile = e.File;
            byte[] imageAsByteArray = new byte[uploadedImageFile.Size];
            await uploadedImageFile.OpenReadStream(31457280).ReadAsync(imageAsByteArray);
            string byteString = Convert.ToBase64String(imageAsByteArray);

            UploadedImage uploadedImage = new UploadedImage()
                {
                    NewImageFileExtensions = uploadedImageFile.Name.Substring(uploadedImageFile.Name.Length - 4),
                    NewImageBase64Content = byteString,
                    OldImagePath = string.Empty
                };

            HttpResponseMessage response = await httpClient.PostAsJsonAsync<UploadedImage>(ApiEndpoints.s_imageUpload, uploadedImage);
            if(response.StatusCode == HttpStatusCode.Created) {
                _categoryToCreate.SectionImagePath = await response.Content.ReadAsStringAsync();
            }
            else {
                _reasonImageUploadFailed = $"Something went wrong when making a request to the server. Server response status code: {response.StatusCode}. Server reason: {response.ReasonPhrase}.";
                _attempToUploadFailed = true;
            }

            _attempingToUplaodImage = false;
            StateHasChanged();
        }
    }
}