@page "/admin/categories"
@using System.Net




<main class="admin-area-main">
    <SideBar />
    <div class="admin-area-content container-fluid bg-lightgray white">
        <div class="row g-0">
            <div class="col">
                <h1>Categories</h1>
                <br />
                <hr />
                <br />

                @if (databaseCache.Sections == null || _attempingToDeletedCategory == true) {
                    <LoadingDot />
                }
                else {
                    <a href="/admin/categories/create" class="btn btn-success shadow me-5 md-f-size-1-5">
                        <i class="fas fa-plus"></i>Create Category     
                    </a>

                    <button @onclick="() => databaseCache.GetSectionsFromDbCache()" class="btn btn-primary md-f-size-1-5 shadow">
                        <i class="fas fa-sync"></i> Refresh data    
                    </button>

                    <br />
                    <br />
                    <br />

                    @if(databaseCache.Sections.Count < 1) {
                        <h1>No categories found. Please, create one.</h1>
                    }
                    else {
                        <div class="table-responsive">
                            <table class="table table-striped table-bordered table-sm">
                                <thead>
                                    <tr>
                                        <th scope="col">Name</th>
                                        <th scope="col">Category image</th>
                                        <th scope="col">Description</th>
                                        <th scope="col">Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach(var category in databaseCache.Sections) {
                                        <tr>
                                            <th class="w-15" scope="row">
                                                <p>@category.Title</p>
                                            </th>
                                            <td class="w-35">
                                                <img src="@($"{ApiEndpoints.ServerBaseUrl}/{category.SectionImagePath}")" class="admin-index-thumbnail-image" alt="Category image">
                                            </td>
                                            <td class="w-15">
                                                <p>@category.Description</p>
                                            </td>
                                            <td class="w-35">
                                                <div class="d-flex flex-column">
                                                    <a href="/admin/categories/update/@category.Id" class="btn btn-update shadow md-f-size-1-5">
                                                        <i class="fas fa-edit"></i> Update    
                                                    </a>
                                                    <br />
                                                    <button @onclick="(() => DeleteCategory(category))" class="btn btn-danger shadow md-f-size-1-5">
                                                        <i class="fas fa-trash"></i> Delete
                                                    </button>
                                                </div>
                                            </td>

                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>

                    }
                }
                <div class="position-fixed bottom-0 end-0 z-index-5">
                    @if (_successfullyDeletedCategory == true) {
                        <Toast IsError="false"
                               ToastTitle="Successfully deleted category"
                               ToastBody="The category has been removed from the database"
                               ParentMethodToCallOnClickBtnClose="() => _successfullyDeletedCategory = false" />
                    }
                    @if (_unsuccessfullyTriedDeletedCategory == true) {
                        <Toast IsError="true"
                               ToastTitle="Delete failed."
                               ToastBody="@($"The reason is \"{_reasonUnsuccessfullyTriedToDeletedCategory}\". Please try again and if the issue persists contact to the administrator.")"
                               ParentMethodToCallOnClickBtnClose="() => _unsuccessfullyTriedDeletedCategory = false" />
                    }
                </div>
            </div>
        </div>
    </div>
</main>


@implements IDisposable
@code {
    [Inject] DatabaseCache databaseCache { get; set; }
    [Inject] HttpClient httpClient { get; set; }

    private bool _attempingToDeletedCategory = false;
    private bool _successfullyDeletedCategory = false;
    private bool _unsuccessfullyTriedDeletedCategory = false;
    private string _reasonUnsuccessfullyTriedToDeletedCategory = string.Empty;

    protected override async Task OnInitializedAsync() {
        databaseCache.OnSectionsDataChanged += StateHasChanged;
        if(databaseCache.Sections == null) {
            await databaseCache.GetSectionsFromDbCache();
        }
    }

    public void Dispose() => databaseCache.OnSectionsDataChanged -= StateHasChanged;  

    private async void DeleteCategory(SectionModel categoryToDelete) {
        if(categoryToDelete.Surveys  != null && categoryToDelete.Surveys.Count != 0) {
            string postTitlesThatMustBeDeletedFirst = string.Empty;
            for (int i = 0; i < categoryToDelete.Surveys.Count; i++) {
                if (i == categoryToDelete.Surveys.Count - 1) {
                    postTitlesThatMustBeDeletedFirst += $"\"{categoryToDelete.Surveys[i].Title}\"";
                }
                else if (i == categoryToDelete.Surveys.Count - 2) {
                    postTitlesThatMustBeDeletedFirst += $"\"{categoryToDelete.Surveys[i].Title}\" and ";
                }
                else {
                    postTitlesThatMustBeDeletedFirst += $"\"{categoryToDelete.Surveys[i].Title}\", ";
                }
            }

            _reasonUnsuccessfullyTriedToDeletedCategory = $"The category still has survey in it. Please delete the surveys titled {postTitlesThatMustBeDeletedFirst} first";
            _unsuccessfullyTriedDeletedCategory = true;
        }
        else {
            _attempingToDeletedCategory = true;
            HttpResponseMessage response = await httpClient.DeleteAsync($"{ApiEndpoints.s_sections}/{categoryToDelete.Id}");

            if(response.StatusCode == HttpStatusCode.NoContent) {
                if (databaseCache.Sections.Remove(categoryToDelete)) {
                    _successfullyDeletedCategory = true;
                }
                else {
                    _reasonUnsuccessfullyTriedToDeletedCategory = "An unexpected error has occured. Please try again and if the issue persists contact to the administrator.";
                    _unsuccessfullyTriedDeletedCategory = true;
                }
            }
            else {
                _reasonUnsuccessfullyTriedToDeletedCategory = $"The API didn't return an HttpStatusCode.NoContent status code. Insted the api returned {response.StatusCode} and gave the following reason for failure: {response.ReasonPhrase}.";
                _unsuccessfullyTriedDeletedCategory = true;
            }
        }

        _attempingToDeletedCategory = false;
        StateHasChanged();
    }

}
