@page "/admin/question/update/{questionId:int}"
@using System.Net;
@using Core.Common;

<main class="admin-area-main">
    <SideBar />

    <div class="admin-area-content container-fluid bg-white">
        <div class="row g-0">
            <div class="col">
                <h1 class="mb-4">Update category</h1>
                @if(_questionToUpdate == null || _attempingToUpdate == true) {
                    <LoadingDot />
                } else{
                    <EditForm Model="_questionToUpdate" OnValidSubmit="UpdateQuestion">
                        <DataAnnotationsValidator />

                        <div class="form-group mb-5">
                            <label for="categoryName">Category Name</label>
                            <InputText @bind-Value="_questionToUpdate.Text" class="form-control" id="categoryName"></InputText>
                        </div>
                        <div class="form-group mb-5">
                            <label for="controlType">Select control type</label>
                            <InputSelect @bind-Value="@_questionToUpdate.ControlType">
                                @foreach (var cntrType in Enum.GetValues(typeof(ControlType))) {
                                    <option value="@cntrType">@cntrType</option>
                                }
                            </InputSelect>
                        </div>
                        <ValidationSummary />

                        <button class="btn btn-success shadow d-block mt-5 md-f-size-1-5" type="submit">
                            <i class="far fa-save"></i> Save
                        </button>

                        <a href="/admin/questions/@_questionToUpdate.SurveyId" class="btn btn-primary shadow mt-5 md-f-size-1-5">
                            <i class="fas fa-arrow-left"></i> Back to all categories
                        </a>
                    </EditForm>
                }

                <div class="position-fixed bottom-0 end-5 z-index-5">
                    @if (_updateSuccessful == true) {
                        <Toast IsError="false"
                               ToastTitle="Update successful"
                               ToastBody="Your changes have been saved to the database."
                               ParentMethodToCallOnClickBtnClose="() => _updateSuccessful = false" />
                    }
                    @if (_attempingToUpdateFailed == true) {
                        <Toast IsError="true"
                               ToastTitle="Update failed"
                               ToastBody="Update failed. Please try again and if the issue persists contant to the administrator."
                               ParentMethodToCallOnClickBtnClose="() => _attempingToUpdateFailed = false" />
                    }
                </div>
            </div>
        </div>
    </div>
</main>

@code{
    [Parameter] public int questionId { get; set; }
    [Inject] HttpClient httpClient { get; set; }
    [Inject] DatabaseCache databaseCache { get; set; }

    private QuestionModel _questionToUpdate = null;
    private bool _attempingToUpdate = false;
    private bool _attempingToUpdateFailed = false;
    private bool _updateSuccessful = false;

    protected async override Task OnParametersSetAsync()
    {
        _questionToUpdate = await databaseCache.GetQuestionById(questionId);
    }

    private async Task UpdateQuestion() {
        _attempingToUpdate = true;

        HttpResponseMessage response = await httpClient.PutAsJsonAsync<QuestionModel>($"{ApiEndpoints.s_questions}/{questionId}", _questionToUpdate);

        if(response.StatusCode == HttpStatusCode.Created) {
            QuestionModel unupdatedQuestionsInList = databaseCache.Questions.Single(q => q.Id == questionId);
            UtilityFunctions.CopyObjectProperties(_questionToUpdate, unupdatedQuestionsInList);
            _updateSuccessful = true;
        }
        else {
            _attempingToUpdateFailed = true;
        }
        _attempingToUpdate = false;
    }
}