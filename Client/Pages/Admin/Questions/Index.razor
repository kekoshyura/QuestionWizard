@page "/admin/questions/{SurveyId:int}"
@using System.Net




<main class="admin-area-main">
    <SideBar />
    <div class="admin-area-content container-fluid bg-lightgray white">
        @if(_questions == null) {
            <LoadingDot />
        }else{
            @if (_questions.Count == 0) {
                <h1>Questions have not been added yet</h1>
            }
            else {
                <div class="row g-0">
                    <div class="col">
                        @if (_survey == null) {
                            <LoadingDot />
                        }
                        else {
                            <h1>@_survey.Title</h1>
                        }
                        <br />
                        <hr />
                        <br />

                        @if (databaseCache.Questions == null || _attempingToDeletedQuestion == true) {
                            <LoadingDot />
                        }
                        else {
                            <a href="/admin/questions/create/@_survey.Id" class="btn btn-success shadow me-5 md-f-size-1-5">
                                <i class="fas fa-plus"></i>Create Question
                            </a>

                            <button @onclick="() => databaseCache.GetQuestionsFromDbCache()" class="btn btn-primary md-f-size-1-5 shadow">
                                <i class="fas fa-sync"></i> Refresh data
                            </button>

                            <br />
                            <br />
                            <br />

                            @if (databaseCache.Questions.Count < 1) {
                                <h1>No questions found. Please, create one.</h1>
                            }
                            else {
                                <div class="table-responsive">
                                    <table class="table table-striped table-bordered table-sm">
                                        <thead>
                                            <tr>
                                                <th scope="col">Question Text</th>
                                                <th scope="col">Control Type Id</th>
                                                <th scope="col">Actions</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var Question in _questions) {
                                                <tr>
                                                    <td class="w-35">
                                                        <p>@Question.Text</p>
                                                    </td>
                                                    <td class="w-15">
                                                        <p>@Question.ControlType</p>
                                                    </td>
                                                    <td class="w-35">
                                                        <div class="d-flex flex-column">
                                                            <a href="/admin/question/update/@Question.Id" class="btn btn-update shadow md-f-size-1-5">
                                                                <i class="fas fa-edit"></i> Update
                                                            </a>
                                                            <br />
                                                            <button @onclick="(() => DeleteQuestion(Question))" class="btn btn-danger shadow md-f-size-1-5">
                                                                <i class="fas fa-trash"></i> Delete
                                                            </button>
                                                            <br />
                                                            <a href="/admin/questionoptions/@Question.Id" class="btn btn-primary shadow md-f-size-1-5">
                                                                <i class="fas fa-file"></i> Check Out Qustion Options
                                                            </a>
                                                        </div>
                                                    </td>

                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                </div>

                            }
                        }
                        <div class="position-fixed bottom-0 end-0 z-index-5">
                            @if (_successfullyDeletedQuestion == true) {
                                <Toast IsError="false"
                                       ToastTitle="Successfully deleted question"
                                       ToastBody="The question has been removed from the database"
                                       ParentMethodToCallOnClickBtnClose="() => _successfullyDeletedQuestion = false" />
                            }
                            @if (_unsuccessfullyTriedDeletedQuestion == true) {
                                <Toast IsError="true"
                                       ToastTitle="Delete failed."
                                       ToastBody="@($"The reason is \"{_reasonUnsuccessfullyTriedToDeletedQuestion}\". Please try again and if the issue persists contact to the administrator.")"
                                       ParentMethodToCallOnClickBtnClose="() => _unsuccessfullyTriedDeletedQuestion = false" />
                            }
                        </div>
                    </div>
                </div>
            }
        }
    </div>
</main>


@implements IDisposable
@code {
    [Inject] DatabaseCache databaseCache { get; set; }
    [Inject] HttpClient httpClient { get; set; }
    [Parameter] public int SurveyId { get; set; }


    private List<QuestionModel> _questions = null;
    private SurveyModel _survey = null;
    private bool _attempingToDeletedQuestion = false;
    private bool _successfullyDeletedQuestion = false;
    private bool _unsuccessfullyTriedDeletedQuestion = false;
    private string _reasonUnsuccessfullyTriedToDeletedQuestion = string.Empty;

    protected override async Task OnInitializedAsync() {
        if(databaseCache.Questions == null) {
            await databaseCache.GetQuestionsFromDbCache();
        }
        _survey = await databaseCache.GetSurveyById(SurveyId);
        _questions = await databaseCache.GetQuestionBySurveyId(SurveyId);
        if (_questions.Count == 0 && _survey.Title == null) {
            throw new ArgumentNullException();
        }
    }

    public void Dispose() => databaseCache.OnQuestionsDataChanged -= StateHasChanged;

    private async void DeleteQuestion(QuestionModel questionToDelete) {
        if(questionToDelete == null) {
            _reasonUnsuccessfullyTriedToDeletedQuestion = $"The Question is null";
            _unsuccessfullyTriedDeletedQuestion = true;
        }

        if (questionToDelete.QuestionOptions != null && questionToDelete.QuestionOptions.Count != 0) {
            foreach(var questionOptions in questionToDelete.QuestionOptions) {
                var questionOptionResponse = await httpClient.DeleteAsync($"{ApiEndpoints.s_questionOptions}/{questionOptions.Id}");
                if (questionOptionResponse.StatusCode != HttpStatusCode.NoContent) {
                    if (!databaseCache.QuestionOptions.Remove(questionOptions)) {
                        _reasonUnsuccessfullyTriedToDeletedQuestion = "An unexpected error has occured. Please try again and if the issue persists contact to the administrator.";
                        _unsuccessfullyTriedDeletedQuestion = true;
                    }
                }
            }
        }
        
        _attempingToDeletedQuestion = true;
        HttpResponseMessage response = await httpClient.DeleteAsync($"{ApiEndpoints.s_questions}/{questionToDelete.Id}");

        if (response.StatusCode == HttpStatusCode.NoContent) {
            if (databaseCache.Questions.Remove(questionToDelete)) {
                _successfullyDeletedQuestion = true;
            }
            else {
                _reasonUnsuccessfullyTriedToDeletedQuestion = "An unexpected error has occured. Please try again and if the issue persists contact to the administrator.";
                _unsuccessfullyTriedDeletedQuestion = true;
            }
        }
        else {
            _reasonUnsuccessfullyTriedToDeletedQuestion = $"The API didn't return an HttpStatusCode.NoContent status code. Insted the api returned {response.StatusCode} and gave the following reason for failure: {response.ReasonPhrase}.";
            _unsuccessfullyTriedDeletedQuestion = true;
        }
       

        _attempingToDeletedQuestion = false;
        StateHasChanged();
    }
}
